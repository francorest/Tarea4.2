{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs24 \cf0 #include <iostream>\
#include <stdio.h>\
#include <stdlib.h>\
#include <fstream>\
#include <string>\
\
using namespace std;\
\
template <typename T>\
class Lista \{\
\
private:\
	T* info;\
	int* size;\
	int* cantElement;\
\
public:\
	Lista();\
	void add(T val);\
	T get(int pos); //por ahora\
	void growIfNeed()\{\};\
	bool arrayFull();\
	int getSize();\
	int getCantElement();\
	void remove(int pos);\
	void setMember(int pos, T valor);\
\};\
\
template <typename T>\
void Lista<T>::setMember(int pos,T valor)\{\
	info[pos] = valor;\
\}\
\
template <typename T>\
Lista<T>::Lista()\{\
\
	cantElement = new int(0);\
	size = new int(5);\
	info = new T[(*size)];\
\
\}\
\
template <typename T>\
void Lista<T>::remove(int pos)\{\
\
		if(pos <= (*cantElement))\{\
\
			T* newData = new T[(*size)];\
			for(int i = 0; i < pos; ++i)\{\
			newData[i] = info[i];\
			\}\
			for(int i = pos+1;i < (*cantElement);++i)\{\
				newData[i-1] = info[i];\
			\}\
			delete[] info;\
			info = newData;\
			--(*cantElement);\
		\}\
\}\
\
template <typename T>\
int Lista<T>::getSize()\{\
	return (*size);\
\}\
template <typename T>\
int Lista<T>::getCantElement()\{\
	return (*cantElement);\
\}\
\
\
template <typename T>\
bool Lista<T>::arrayFull()\{\
\
	if((*size) == (*cantElement))\
		return true;\
	else\
		return false;\
\
	return true;\
\}\
\
\
template <typename T>\
void Lista<T>::add(T val)\{\
\
	if(arrayFull())\{\
\
		int newLenght = (*size)*2;\
		T* newData = new T[newLenght];\
		for(int i = 0; i < (*cantElement); ++i)\{\
		newData[i] = info[i];\
		\}\
		delete[] info;\
\
		info = newData;\
		(*size) = newLenght;\
		info[(*cantElement)] = val;\
		++(*cantElement);\
		\}\
	else\
	\{\
		info[(*cantElement)] = val;\
		++(*cantElement);\
\
	\}\
\
\}\
template <typename T>\
T Lista<T>::get(int a)\{\
	return info[a];\
\}\
\
\
class FBT \{\
private:\
	bool* nodes;\
int* niveles;\
public:\
	FBT()\{\
nodes = new bool[1048575];\
	niveles = new int[20];\
	niveles[0] = 1;\
	niveles[1] = 3;\
	niveles[2] = 7;\
	niveles[3] = 15;\
	niveles[4] = 31;\
	niveles[5] = 63;\
	niveles[6] = 127;\
	niveles[7] = 255;\
	niveles[8] = 511;\
	niveles[9] = 1023;\
	niveles[10] = 2047;\
	niveles[11] = 4095;\
	niveles[12] = 8191;\
	niveles[13] = 16383;\
	niveles[14] = 32767;\
	niveles[15] = 65535;\
	niveles[16] = 131071;\
	niveles[17] = 262143;\
	niveles[18] = 524287;\
	niveles[19] = 1048575;\
\
\}\
	 ~FBT()\{\
delete[] nodes;\
\}\
	\
	void clearFbt(int nivel)\{\
for (int i = 0; i<niveles[nivel-1]; i++) \{\
		nodes[i] = 0;\
	\}\
\}\
	int ball(int nivel)\{\
int n = 1;\
	\
	\
	for (int i = 0; i<nivel-1; i++) \{\
		nodes[n-1]=!nodes[n-1];\
		if (!nodes[n-1]) \{\
			n=(n*2)+1;\
		\}else \{\
			n=n*2;\
		\}\
	\}\
	\
	return n;\
\}\
	int process(int nivel,int repeticiones)\{\
clearFbt(nivel);\
	int retorno = 0;\
	for(int i = 0;i < repeticiones;i++)\
		retorno = ball(nivel);\
\
	return retorno;\
\}\
	\
	Lista<string>* split(string lin, char ch)\{\
	Lista<string>* auxList = new Lista<string>();\
\
	for(int i = 0; i < (int)(lin.size());++i)\{\
\
		if(lin[i] == ch)\{\
\
			auxList->add(lin.substr(0,i));\
			lin = lin.substr(i+1,lin.size()-i);\
			i=-1;\
		\}\
		else if(i == (lin.size()-1) && lin[i] != ch)\{\
			auxList->add(lin.substr(0,i+1));\
		\}\
\
	\}\
\
	return auxList;\
\}\
\
\};\
\
\
int main() \{\
\
\
	//cout << "INPUT"<<endl;\
	string numberOfTest;\
	getline(cin, numberOfTest);\
	int numberOfT = atoi(numberOfTest.c_str());\
	string* listOfTest = new string[numberOfT];\
	string input_line = "";\
\
	for(int i = 0; i < numberOfT;i++)\{\
		getline(cin, input_line);\
		listOfTest[i] = input_line;\
	\}\
	getline(cin, input_line);\
\
	FBT* fbt = new FBT();\
\
	//cout<<"OUTPUT"<<endl;\
	for(int i = 0; i < numberOfT;i++)\{\
		Lista<string>* lista = fbt->split(listOfTest[i],' ');\
		int nivel = atoi(lista->get(0).c_str());\
		int repeticiones =atoi(lista->get(1).c_str());\
		cout<<fbt->process(nivel,repeticiones)<<endl;\
	\}\
\
	return 0;\
\}\
\
}