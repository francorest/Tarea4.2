{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs24 \cf0 #include <iostream>\
#include <stdio.h>\
#include <stdlib.h>\
#include <fstream>\
#include <string>\
\
using namespace std;\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 class Node \{\
public:\
	Node(int ind, int niv) \{\
	index = new int(ind);\
	nivel = new int(niv);\
	value = new bool(false);\
	left = 0;\
	right = 0;\
\}\
	~Node() \{\
	delete index;\
	delete nivel;\
	delete value;\
	delete left;\
	delete right;\
\}\
	void setLeftNode(Node* l)\{\
	left = l;\
\}\
	void setRightNode(Node* r)\{\
	right = r;\
\}\
	Node* getLeftNode()\{\
	return left;\
\}\
	Node* getRightNode()\{\
	return right;\
\}\
\
	int getIndex()\{\
	return *index;\
\}\
	bool getValue()\{\
	return *value;\
\}\
	int getNivel()\{\
	return *nivel;\
\}\
	void invertirValue()\{\
	if(*value)\
		(*value) = false;\
	else\
		(*value) = true;\
\}\
	void setValue(bool val)\{\
	(*value) = val;\
\}\
	void clearChilds(int niv)\{\
		setValue(false);\
		if(*nivel < niv)\{\
			right->clearChilds(niv);\
			left->clearChilds(niv);\
		\}\
\}\
	int ball(int niv)\{\
\
	if(*nivel == niv)\
		return *index;\
\
	else if(!*value)\{\
		invertirValue();\
		return left->ball(niv);\
	\}\
\
	else\{\
		invertirValue();\
		return right->ball(niv);\
	\}\
\}\
\
	void printChilds()\{\
	cout<<*index<<endl;\
	if(right != 0)\
		right->printChilds();\
	if(left != 0)\
		left ->printChilds();\
\
\}\
private:\
	Node* left;\
	Node* right;\
	int* index;\
	bool* value;\
	int* nivel;\
\};\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 \
template <typename T>\
class Lista \{\
\
private:\
	T* info;\
	int* size;\
	int* cantElement;\
\
public:\
	Lista();\
	void add(T val);\
	T get(int pos); //por ahora\
	void growIfNeed()\{\};\
	bool arrayFull();\
	int getSize();\
	int getCantElement();\
	void remove(int pos);\
	void setMember(int pos, T valor);\
\};\
\
template <typename T>\
void Lista<T>::setMember(int pos,T valor)\{\
	info[pos] = valor;\
\}\
\
template <typename T>\
Lista<T>::Lista()\{\
\
	cantElement = new int(0);\
	size = new int(5);\
	info = new T[(*size)];\
\
\}\
\
template <typename T>\
void Lista<T>::remove(int pos)\{\
\
		if(pos <= (*cantElement))\{\
\
			T* newData = new T[(*size)];\
			for(int i = 0; i < pos; ++i)\{\
			newData[i] = info[i];\
			\}\
			for(int i = pos+1;i < (*cantElement);++i)\{\
				newData[i-1] = info[i];\
			\}\
			delete[] info;\
			info = newData;\
			--(*cantElement);\
		\}\
\}\
\
template <typename T>\
int Lista<T>::getSize()\{\
	return (*size);\
\}\
template <typename T>\
int Lista<T>::getCantElement()\{\
	return (*cantElement);\
\}\
\
\
template <typename T>\
bool Lista<T>::arrayFull()\{\
\
	if((*size) == (*cantElement))\
		return true;\
	else\
		return false;\
\
	return true;\
\}\
\
\
template <typename T>\
void Lista<T>::add(T val)\{\
\
	if(arrayFull())\{\
\
		int newLenght = (*size)*2;\
		T* newData = new T[newLenght];\
		for(int i = 0; i < (*cantElement); ++i)\{\
		newData[i] = info[i];\
		\}\
		delete[] info;\
\
		info = newData;\
		(*size) = newLenght;\
		info[(*cantElement)] = val;\
		++(*cantElement);\
		\}\
	else\
	\{\
		info[(*cantElement)] = val;\
		++(*cantElement);\
\
	\}\
\
\}\
template <typename T>\
T Lista<T>::get(int a)\{\
	return info[a];\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 \
\
class FBT \{\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 private:\
	Node* root;\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 public:\
	FBT()\{\
root = new Node(1,1);\
	createTree(root,2,2);\
\}\
	 ~FBT()\{\
delete root;\
\}\
	void createTree(Node* nodo, int nivel, int index)\{\
	Node* left = new Node(index,nivel);\
	Node* right = new Node(index+1,nivel);\
	nodo->setLeftNode(left);\
	nodo->setRightNode(right);\
	if(nivel < 20)\{\
		++nivel;\
		createTree(right,nivel,(index+1)*2);\
		createTree(left,nivel,index*2);\
\
	\}\
\}\
	void clearFbt(int nivel)\{\
root->clearChilds(nivel);\
\}\
	int ball(int nivel)\{\
return root->ball(nivel);\
\}\
	int process(int nivel,int repeticiones)\{\
clearFbt(nivel);\
	int retorno = 0;\
	for(int i = 0;i < repeticiones;i++)\
		retorno = ball(nivel);\
\
	return retorno;\
\}\
	void printTree()\{\
root->printChilds();\
\}\
	Lista<string>* split(string lin, char ch)\{\
	Lista<string>* auxList = new Lista<string>();\
\
	for(int i = 0; i < (int)(lin.size());++i)\{\
\
		if(lin[i] == ch)\{\
\
			auxList->add(lin.substr(0,i));\
			lin = lin.substr(i+1,lin.size()-i);\
			i=-1;\
		\}\
		else if(i == (lin.size()-1) && lin[i] != ch)\{\
			auxList->add(lin.substr(0,i+1));\
		\}\
\
	\}\
\
	return auxList;\
\}\
\
\};\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 int main() \{\
\
\
	//cout << "INPUT"<<endl;\
	string numberOfTest;\
	getline(cin, numberOfTest);\
	int numberOfT = atoi(numberOfTest.c_str());\
	string* listOfTest = new string[numberOfT];\
	string input_line = "";\
\
	for(int i = 0; i < numberOfT;i++)\{\
		getline(cin, input_line);\
		listOfTest[i] = input_line;\
	\}\
	getline(cin, input_line);\
\
	FBT* fbt = new FBT();\
\
	//cout<<"OUTPUT"<<endl;\
	for(int i = 0; i < numberOfT;i++)\{\
		Lista<string>* lista = fbt->split(listOfTest[i],' ');\
		int nivel = atoi(lista->get(0).c_str());\
		int repeticiones =atoi(lista->get(1).c_str());\
		cout<<fbt->process(nivel,repeticiones)<<endl;\
	\}\
\
	/*int test = fbt->process(4,2);\
	int test2 = fbt->process(3,4);\
	int test3= fbt->process(10,1);\
	int test4 = fbt->process(2,2);\
	int test5 = fbt->process(8,12800);\
\
	cout << test << endl;\
	cout << test2 << endl;\
	cout << test3 << endl;\
	cout << test4 << endl;\
	cout << test5 << endl;*/\
	return 0;\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 \
}